/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package multiplayer.minesweeper.rest.server;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.http.HttpMethod;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.CorsHandler;
import multiplayer.minesweeper.sessions.GameMode;
import multiplayer.minesweeper.sessions.Session;
import multiplayer.minesweeper.sessions.SessionsManager;
import multiplayer.minesweeper.socket.SocketServer;

import java.util.UUID;

public class RestServer extends AbstractVerticle {
    private final static RestServer instance = new RestServer();

    private RestServer() {}

    private void createNewSession(RoutingContext rc) {
        rc.request().bodyHandler(bodyHandler -> {
            final JsonObject body = bodyHandler.toJsonObject();
            System.out.println("Received new-session request. Body: " + body);

            String sessionName = body.getString("sessionName");
            GameMode mode = GameMode.getEnum(body.getString("selectedGameMode"));
            String roomId = UUID.randomUUID().toString();
            Session newSession = SessionsManager.getInstance().addSession(roomId, sessionName, mode);
            SocketServer.getInstance().emitSessionUpdate(newSession);

            rc.response()
                    .putHeader("content-type",
                            "application/json; charset=utf-8")
                    .end(Json.encodePrettily(roomId));
        });
    }

    @Override
    public void start() {
        // Create a Router
        Router router = Router.router(vertx);

        router.route().handler(CorsHandler.create("((http://)|(https://))localhost\\:\\d+")
            .allowedMethod(HttpMethod.GET)
            .allowedMethod(HttpMethod.POST)
            .allowedMethod(HttpMethod.OPTIONS)
            .allowCredentials(true)
            .allowedHeader("Access-Control-Allow-Method")
            .allowedHeader("Access-Control-Allow-Origin")
            .allowedHeader("Access-Control-Allow-Credentials")
            .allowedHeader("Content-Type"));

        router.post("/new-session").handler(this::createNewSession);

        vertx.createHttpServer()
                .requestHandler(router)
                .listen(8001)
                .onSuccess(server ->
                        System.out.println(
                                "HTTP server started on port " + server.actualPort()
                        )
                );
    }

    public void close() {
        System.out.println("Terminating Vert.X http server");
        vertx.close();
    }

    public static RestServer getInstance() {
        return instance;
    }
}